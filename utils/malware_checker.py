# utils/malwar_checker.py

import os
import mimetypes

def is_malware(file_path):
    suspicious_ext = ['.exe', '.bat', '.vbs', '.scr', '.pif', '.cmd', '.js']
    double_extensions = ['.jpg.exe', '.pdf.exe', '.docx.scr']
    small_file_limit = 100  # only flag files under 100 bytes

    results = []

    if not os.path.exists(file_path):
        return {
            "result": "Error: File not found",
            "file_name": os.path.basename(file_path),
            "file_path": file_path
        }

    _, ext = os.path.splitext(file_path)
    ext = ext.lower()

    if ext in suspicious_ext:
        results.append("Suspicious extension")

    lower_name = os.path.basename(file_path).lower()
    for d_ext in double_extensions:
        if lower_name.endswith(d_ext):
            results.append("Double extension detected")
            break

    try:
        size = os.path.getsize(file_path)
        if size < small_file_limit and ext in suspicious_ext:
            results.append("Unusually small file for an executable/script")
    except Exception as e:
        return {
            "result": f"Error reading file size: {e}",
            "file_name": os.path.basename(file_path),
            "file_path": file_path
        }

    mime, _ = mimetypes.guess_type(file_path)
    if ext in ['.exe', '.dll'] and (mime is None or 'application' not in mime):
        results.append("MIME type mismatch")

    scan_result = f"Potential Malware: {'; '.join(results)}" if results else "File Seems Safe"

    return {
        "result": scan_result,
        "file_name": os.path.basename(file_path),
        "file_path": file_path
    }